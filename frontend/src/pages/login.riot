<login>
  <div class="flex h-screen items-center justify-center">
    <form class="border p-12 flex flex-col gap-3 w-[400px] min-h-[250px]" onsubmit={handleLogin}>
      <h1 class="self-center text-4xl mb-3">Time Tracker</h1>

      <label for="username" class="grid">
        Username
        <input class="border p-1" type="text" id="username" name="username" required />
        <p if={state.loginError} class="text-sm text-red-500">
          {state.loginError}
        </p>
      </label>

      <div class="flex flex-col items-center gap-3">
        <button class="border p-2 px-5" onclick={handleLogin}>
          Login
        </button>
        <a href="/signup" class="underline text-sm">
          Create a new account
        </a>
      </div>
    </form>
  </div>

  <script>

    import { router } from "@riotjs/route";
    import store from "../store";
    
    export default {
        onMounted() {
        store.install(this);
        this.update();
        },
    
        onUnmounted() {
        this.update({
            loginError: "",
        });
        },
    
        async handleLogin(event) {
        event.preventDefault();
    
        const username = document.getElementById("username").value;
    
        if (username.length === 0) {
            return this.update({
            loginError: "Username must not be empty.",
            });
        }
    
        const response = await fetch("http://localhost:8080/auth/login", {
            method: "POST",
            headers: {
            "Content-Type": "application/json;charset=utf-8",
            },
            body: JSON.stringify({
            username,
            }),
        });
    
        const user = await response.json();
    
        // Show message response if there is an error message
        if (user.message) {
            return this.update({
            loginError: user.message,
            });
        }
    
        store.dispatch("setUser", user);
    
        router.push("/");
        },
    };

  </script>
</login>
