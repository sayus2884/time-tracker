<home>
  <navbar projects={state.projects} handleProjectSelect={handleProjectSelect}/>

  <div class="grid p-3 gap-3">
    <h2>
      Hello {state.user.name}. You've worked on the project for <span>{" " + state.totalHours} hours</span>
    </h2>

    <form class="flex gap-3" onsubmit={handleSubmit}>
      <input class="p-1 border grow" onkeyup={handleChange} type="text" id="description" name="description" value={state.description} required/>
      <div class="p-1 border">
        <input onkeyup={handleChange} type="number" id="hours" name="hours" value={state.hours} required/>
        <span>hours</span>
      </div>
      <button class="p-1 border px-5" type="submit">Add</button>
    </form>

    <ul class="grid md:grid-cols-2 lg:grid-cols-4 gap-3">
      <li each={task in state.tasks}>
        <div class="border p-3 grid gap-2 ">
          <p>{task.description}</p>

          <div class="flex justify-between items-center">
            <p class="text-sm text-gray-400">{ new Date(task.createdAt).toLocaleDateString("en-US", dateOptions)} ({task.hours} hours)</p>

            <button class="border p-1" onclick={() => handleTaskDelete(task._id)}>delete</button>
          </div>
        </div>
      </li>
    </ul>
  </div>

  <script>
    import store from "../store"
    import {router} from "@riotjs/route"

    const dateOptions = { weekday: 'short', year: 'numeric', month: 'short', day: 'numeric' };
    const calculateTotalHours = (tasks) => {
      return tasks.reduce((totalhours, task) => {
            return totalhours + parseInt(task.hours)
          }, 0)
    }

    export default {
      dateOptions,
      shared: ['user'],

      state: {
        projects: [],
        tasks: [],
        currentProjectId: "",
        totalHours: 0,
        hours: "",
        user: {
          name: ""
        }
      },
      
      async onBeforeMount() {
        store.install(this)
        const user = this.user

        if(!user) {
          router.push("/login")
        }

        // Fetch projects
        const projectsResponse = await fetch("http://localhost:8080/projects");
        const projects = await projectsResponse.json();
        const currentProjectId = projects[0]._id

        // Fetch tasks
        const tasksResponse = await fetch("http://localhost:8080/tasks?"+ new URLSearchParams({
          projectId: currentProjectId
        }));
        const tasks = await tasksResponse.json();

        this.update({
          user,
          projects,
          currentProjectId: projects[0]._id,
          tasks,
          totalHours: calculateTotalHours(tasks)
        });
      },

      async handleSubmit(event){

        event.preventDefault()
        const { description, hours, user, currentProjectId} = this.state
        const newTask = {
          description, hours, userId: user._id, projectId: currentProjectId  
        }


        const response = await fetch("http://localhost:8080/tasks", {
            method: "POST",
            headers: {
            'Content-Type': 'application/json;charset=utf-8'
            },
            body: JSON.stringify(newTask)
        })
        const createdTask = await response.json()
        const newTasks = [createdTask, ...this.state.tasks]

        this.update({
          tasks: newTasks,
          totalHours: calculateTotalHours(newTasks),
          description: "",
          hours: ""
        })
      },

      async handleTaskDelete(taskId){
        const response = await fetch(`http://localhost:8080/tasks/${taskId}`, {
            method: "DELETE"
        })

        const data = await response.json()

        if(data.deleted) {
          const newTasks = this.state.tasks.filter((task) => {
            return task._id !== taskId
          })

          this.update({
            tasks: newTasks,
            totalHours: calculateTotalHours(newTasks)
          })
        }
      },

      handleChange(event) {
        this.update({
          [event.target.id]: event.target.value
        })
      },

      async handleProjectSelect(event){
        const projectId = event.target.value 

        // Fetch tasks
        const tasksResponse = await fetch("http://localhost:8080/tasks?" + new URLSearchParams({
          projectId
        }));

        const tasks = await tasksResponse.json();

        this.update({
          currentProjectId: projectId,
          tasks,
          totalHours: calculateTotalHours(tasks)
        })
      },
    };

  </script>
</home>
